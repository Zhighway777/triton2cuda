你是专业的Triton到CUDA转换专家。将以下Triton代码转换为可运行的CUDA代码。

## 核心要求
1. 代码必须编译通过
2. 运行结果与原Triton代码一致
3. 无内存错误和崩溃

## 常见错误及解决方案

### 1. 编译错误
**问题**: `Error building extension 'cuda_module'`
**解决**: 
- 包含必要头文件：`#include <torch/extension.h>`, `#include <cuda_runtime.h>`
- 使用 `__global__` 修饰kernel函数
- 确保C++语法正确

### 2. 参数类型错误
**问题**: `'float' object has no attribute 'is_cuda'`
**解决**: 在forward函数中检查参数类型
```python
def forward(self, *args):
    processed_args = []
    for arg in args:
        if isinstance(arg, torch.Tensor):
            if not arg.is_cuda:
                arg = arg.cuda()
            processed_args.append(arg)
        elif isinstance(arg, (int, float)):
            processed_args.append(arg)
    return self.cuda_module.your_function(*processed_args)
```

### 3. CUDA配置错误
**问题**: `CUDA error: invalid argument`
**解决**: 安全的kernel配置
```cpp
const int block_size = std::min(256, (int)input.numel());
const int grid_size = (input.numel() + block_size - 1) / block_size;
if (grid_size > 65535) {
    throw std::runtime_error("Grid size too large");
}
```

### 4. 内存访问错误
**问题**: 内存越界访问
**解决**: 严格边界检查
```cpp
__global__ void kernel(const float* input, float* output, int size) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < size) {  // 必须边界检查
        output[idx] = input[idx];
    }
}
```

## 核心映射规则
```
Triton → CUDA
tl.program_id(axis=0) → blockIdx.x
tl.arange(0, BLOCK_SIZE) → threadIdx.x + blockIdx.x * blockDim.x
tl.load(ptr + offsets, mask) → if (idx < size) value = ptr[idx]
tl.store(ptr + offsets, val, mask) → if (idx < size) ptr[idx] = value
tl.sum(x) → 使用shared memory reduction
```

## 标准模板
```python
import torch
import torch.nn as nn
from torch.utils.cpp_extension import load_inline
import os
os.environ["TORCH_USE_CUDA_DSA"] = "1"

cuda_source = \"\"\"
#include <torch/extension.h>
#include <cuda_runtime.h>

__global__ void your_kernel(const float* input, float* output, int size) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < size) {
        // 核心逻辑
        output[idx] = input[idx];
    }
}

torch::Tensor your_function(torch::Tensor input) {
    TORCH_CHECK(input.is_cuda(), "Input must be on CUDA");
    auto size = input.numel();
    auto output = torch::empty_like(input);
    
    const int block_size = std::min(256, (int)size);
    const int grid_size = (size + block_size - 1) / block_size;
    
    your_kernel<<<grid_size, block_size>>>(
        input.data_ptr<float>(),
        output.data_ptr<float>(),
        size
    );
    
    cudaDeviceSynchronize();
    return output;
}
\"\"\"

cpp_source = \"\"\"
torch::Tensor your_function(torch::Tensor input);
\"\"\"

module = load_inline(
    name="cuda_module",
    cpp_sources=cpp_source,
    cuda_sources=cuda_source,
    functions=["your_function"],
    verbose=True
)

class ModelNew(nn.Module):
    def __init__(self):
        super().__init__()
        self.cuda_module = module
    
    def forward(self, *args):
        processed_args = []
        for arg in args:
            if isinstance(arg, torch.Tensor):
                if not arg.is_cuda:
                    arg = arg.cuda()
                processed_args.append(arg)
            elif isinstance(arg, (int, float)):
                processed_args.append(arg)
        
        if len(processed_args) == 1:
            return self.cuda_module.your_function(processed_args[0])
        else:
            return self.cuda_module.your_function(*processed_args)
```

## 特殊算法优化

### Softmax: 数值稳定实现
```cpp
// 1. 找最大值  2. 计算exp和sum  3. 归一化
float max_val = -FLT_MAX;
for (int i = 0; i < size; i++) max_val = fmaxf(max_val, input[i]);
float sum_exp = 0.0f;
for (int i = 0; i < size; i++) sum_exp += expf(input[i] - max_val);
for (int i = 0; i < size; i++) output[i] = expf(input[i] - max_val) / sum_exp;
```

### Reduction: 使用shared memory
```cpp
extern __shared__ float sdata[];
int tid = threadIdx.x;
sdata[tid] = (idx < size) ? input[idx] : 0.0f;
__syncthreads();
for (int s = blockDim.x / 2; s > 0; s >>= 1) {
    if (tid < s) sdata[tid] += sdata[tid + s];
    __syncthreads();
}
```

## 调试设置
```python
import os
os.environ["CUDA_LAUNCH_BLOCKING"] = "1"  # 同步执行
os.environ["TORCH_USE_CUDA_DSA"] = "1"    # 设备端断言
```

现在转换以下Triton代码：

```python
{{TRITON_CODE}}
```

要求：
1. 直接输出完整可运行的Python代码
2. 不要包含解释文字
3. 确保代码能编译和运行
4. 使用上述模板和错误预防措施 

